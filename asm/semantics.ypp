%{
#include "sim/types.h"
#include "asm/codegen.h"
#include <iostream>
using namespace std;
void yyerror(const char*);
extern int32_t yylineno;
int32_t yylex();
extern codegen * cgen;
short inline PACK_OPERANDS(byte x, byte y, byte z) {
  return  (x      & (uint16_t)0x001F) | 
         ((y<<5)  & (uint16_t)0x03e0) | 
         ((z<<10) & (uint16_t)0x7C00);
  }
%}
%token NEWLINE TEXT_SECTION DATA_SECTION LABELDECL INTEGER LABELREF REGISTER INVALID_REGISTER
%token SLR ANDI AND OR XOR XNOR ADDI ADD ADC SUB SUBI BRANCH BRANCHEQZ BRANCHGE BRANCHNE LOAD LOADADDR LOADBYTE LOADWORDF LOADWORD LOADIMMED SYSCALL NOOP STORE STOREHALF STOREWORD OUTLOOP OUTLOOPA NOT
%token OUTBYTE OUTHALF OUTWORD OUT6B OUTDOUBLE OUTQUAD
%token WORD BYTE SPACE ASCII ASCIIZ STRING SECTION_IDENT
//%token OP
%type<sysword>   rsrc1 rsrc2 rdest 
%type<sysoffset>  offset
%type<sysword>   INTEGER REGISTER
%type<sysstring> STRING LABELDECL LABELREF
%%

program      : statements 
             ;

statements   : statement
             | statements NEWLINE statement
             ;

addressable  : dataelement
             | instruction { cgen->emit<byte>(0); /* just rounding off to 8 bytes per instruction */ }
             ;
             
dataelement  : word
             | byte
             | space
             | ascii
             | asciiz
             | error {
               cout << "invalid data element; line " << yylineno << endl; exit(11);
             }
             ;

labeldec     : /*empty*/
             | LABELDECL       { cgen->label_here($1.ptr); }
             ;

offset       : INTEGER '(' REGISTER ')'  { sys_offset s = {$3, $1};  $<sysoffset>$ = s; }
             | '(' REGISTER ')'   { sys_offset s = {$2, 0};  $<sysoffset>$ = s; }
             | error {
                cout << "invalid offfset; line " << yylineno << endl;  exit(11);
             }
             ;
           
rsrc1        : REGISTER
             | error { cout << "expected first source register; line " << yylineno << endl; exit(11);}
             ;

rsrc2        : REGISTER
             | error { cout << "expected second source register; line " << yylineno << endl; exit(11);}
             ;
           
rdest        : REGISTER 
             | error { cout << "expected destination register; line " << yylineno << endl; exit(11);}
             ;

address      : INTEGER '(' LABELREF ')' { 
             cgen->emit_label_address_with_offset($3.ptr,$1);
             }
             | INTEGER         { cgen->emit<uint32_t>($1); }
             | LABELREF        { cgen->emit_label_address($1.ptr); }
             | error {
                cout << "invalid address; line " << yylineno << endl;  exit(11);
             }
             ;

statement    : TEXT_SECTION    { cgen->in_text_section(); }
             | DATA_SECTION    { cgen->in_data_section(); }
             | labeldec
             | labeldec addressable
             | SECTION_IDENT {
               cout << "invalid section; line " << yylineno << endl; exit(10);
             }
             ;
             
instruction :  NOOP {
                 cgen->emit<byte>(0); cgen->emit<short>(0); cgen->emit<uint32_t>(0);
               }
             | ADDI    { cgen->emit<byte>(1); } rdest ',' rsrc1 { 
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, 0)); } ',' 
                  INTEGER { cgen->emit<uint32_t>($8); }
             | BRANCH { cgen->emit<byte>(2); cgen->emit<short>(0); }    
               address
             | BRANCHEQZ { cgen->emit<byte>(2); } 
               rsrc1 ',' { cgen->emit<uint16_t>(PACK_OPERANDS(0, $3, 0)); }
               address
             | BRANCHGE  { cgen->emit<byte>(3); }  
               rsrc1 ',' rsrc2 ',' { cgen->emit<uint16_t>(PACK_OPERANDS(0, $3, $5)); } 
               address
             | BRANCHNE  { cgen->emit<byte>(4); } 
               rsrc1 ',' rsrc2 ',' { cgen->emit<uint16_t>(PACK_OPERANDS(0, $3, $5)); }
               address
             | LOADADDR  { cgen->emit<byte>(5); } 
               rdest ',' { cgen->emit<uint16_t>(PACK_OPERANDS($3, 0, 0)); } 
               address
             | LOADWORD  { cgen->emit<byte>(6); }
               rdest ',' offset    { 
                 cgen->emit<uint16_t>(PACK_OPERANDS($3, $5.reg, 0)); 
                 cgen->emit<uint32_t>($5.offset);
               }
             | LOADWORDF { cgen->emit<byte>(33); }
               rdest ',' offset    { 
                 cgen->emit<uint16_t>(PACK_OPERANDS($3, $5.reg, 0)); 
                 cgen->emit<uint32_t>($5.offset);
               }
             | LOADIMMED rdest ',' INTEGER {
                 cgen->emit<byte>(7);
                 cgen->emit<short>(PACK_OPERANDS($2, 0, 0));
                 cgen->emit<uint32_t>($4);
               }
             | LOADBYTE  { cgen->emit<byte>(8); }
               rdest ',' offset    { 
                 cgen->emit<uint16_t>(PACK_OPERANDS($3, $5.reg, 0)); 
                 cgen->emit<uint32_t>($5.offset);
               }
             | SUBI   { cgen->emit<byte>(9); }    
               rdest ',' rsrc1 { cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, 0)); } ',' 
               INTEGER {
                 cgen->emit<uint32_t>($8);
               }
             | ADD    { cgen->emit<byte>(10); } rdest ',' rsrc1 ',' rsrc2 {
                cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, $7)); 
                cgen->emit<uint32_t>(0); }
             | SYSCALL {
                  cgen->emit<byte>(11); cgen->emit<short>(0); cgen->emit<uint32_t>(0);
               }
             | STORE {cgen->emit<byte>(12);}
               address ',' rsrc1 {
	         cgen->emit<uint16_t>(PACK_OPERANDS($5, 0, 0)); 
               } 
             | LOAD  { cgen->emit<byte>(13); }
               rdest ',' { cgen->emit<uint16_t>(PACK_OPERANDS($3, 0, 0)); } 
               address
             | SUB    { cgen->emit<byte>(14); } rdest ',' rsrc1 ',' rsrc2 {
                cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, $7)); 
                cgen->emit<uint32_t>(0); }
             | OUTBYTE {cgen->emit<byte>(15);}
               rdest ',' { 
                 cgen->emit<uint16_t>(0);
               } address
             | OUTHALF {cgen->emit<byte>(16);}
               rdest ',' { 
                 cgen->emit<uint16_t>(0); 
               } address    
             | OUTWORD {cgen->emit<byte>(17);}
               rdest ',' { 
                 cgen->emit<uint16_t>(0); 
               } address    
             | OUTDOUBLE {cgen->emit<byte>(18);}
               rdest ',' offset    { 
                 cgen->emit<uint16_t>(PACK_OPERANDS($3, $5.reg, 0)); 
                 cgen->emit<uint32_t>($5.offset);
               }
             | OUTQUAD {cgen->emit<byte>(19);}
               rdest ',' offset    { 
                 cgen->emit<uint16_t>(PACK_OPERANDS($3, $5.reg, 0)); 
                 cgen->emit<uint32_t>($5.offset);
               }
             | OUTLOOP {cgen->emit<byte>(20);}
               rdest ',' offset ',' rsrc1 { 
                 cgen->emit<uint16_t>(PACK_OPERANDS($7, $5.reg, $7)); 
                 cgen->emit<uint32_t>($5.offset);
               }
             | OUTLOOPA {cgen->emit<byte>(21);}
               rdest ',' address  
             | AND    { cgen->emit<byte>(22); }  rdest ',' rsrc1 ',' rsrc2 { 
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, $7)); 
                cgen->emit<uint32_t>(0); }
             | OR    { cgen->emit<byte>(23); } rdest ',' rsrc1  ',' rsrc2 {  
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, $7)); 
                cgen->emit<uint32_t>(0); }
             | XOR    { cgen->emit<byte>(24); } rdest ',' rsrc1 ',' rsrc2 { 
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, $7)); 
                cgen->emit<uint32_t>(0); }
             | XNOR   { cgen->emit<byte>(25); } rdest ',' rsrc1 ',' rsrc2 {
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, $7)); 
                cgen->emit<uint32_t>(0); }
             | SLR    { cgen->emit<byte>(26); } rdest ',' rsrc1 { 
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, 0)); } ',' 
                  INTEGER { cgen->emit<uint32_t>($8); }
             | ADC    { cgen->emit<byte>(27); } rdest ',' rsrc1 { 
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, 0)); } ',' 
                  INTEGER { cgen->emit<uint32_t>($8); }
             | ANDI   { cgen->emit<byte>(28); }  rdest ',' rsrc1 { 
                  cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, 0)); } ',' 
                  INTEGER { cgen->emit<uint32_t>($8); }
             | STOREWORD {cgen->emit<byte>(29);}
               offset ',' rsrc1 {
                 cgen->emit<uint16_t>(PACK_OPERANDS(0, $3.reg, $5)); 
                 cgen->emit<uint32_t>($3.offset);
               }
             | OUT6B  {cgen->emit<byte>(30);}
               rdest ',' { 
                 cgen->emit<uint16_t>(0); 
               } address    
             | NOT {cgen->emit<byte>(31);}
               rdest ',' rsrc1 {
                 cgen->emit<uint16_t>(PACK_OPERANDS($3, $5, 0)); 
                 cgen->emit<uint32_t>(0); 
               }
             | STOREHALF {cgen->emit<byte>(32);}
               offset ',' rsrc1 {
                 cgen->emit<uint16_t>(PACK_OPERANDS(0, $3.reg, $5)); 
                 cgen->emit<uint32_t>($3.offset);
               }
             | LABELREF {
                cout << "unknown instruction; line " << yylineno << endl;  exit(11);  
              }
	     ;

word         : WORD integers
             | WORD error {
                 cout << "invalid .word; line " << yylineno << endl;  exit(11);             
             }                                     
             ;                                     

byte         : BYTE bytes             
             | BYTE error {                        
                cout << "invalid .byte; line " << yylineno << endl;   exit(11);            
             }                                     
             ;                                     

space        : SPACE INTEGER         { cgen->emit_n<byte>($2, 0); }
             | SPACE error {                       
               cout << "invalid .space; line " << yylineno << endl;   exit(11);             
             }                                     
             ;                                     

ascii        : ASCII STRING          { cgen->emit_string(std::string($2.ptr, $2.len)); }
             | ASCII error {                       
                cout << "invalid .ascii; line " << yylineno << endl;  exit(11);
             }
             ;

asciiz       : ASCIIZ STRING          { cgen->emit_string(std::string($2.ptr, $2.len)); cgen->emit<byte>(0); }
             | ASCIIZ error {                       
                cout << "invalid .asciiz; line " << yylineno << endl;  exit(11);
             }
             ;

integers     : INTEGER               { cgen->emit<uint32_t>($1); }
             | integers INTEGER      { cgen->emit<uint32_t>($2); }
             ;

bytes        : INTEGER               { cgen->emit<byte>($1); }
             | bytes INTEGER         { cgen->emit<byte>($2); }
             ;
             
%%


